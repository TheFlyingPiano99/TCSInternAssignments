openapi: 3.0.0
info:
  title: TCS Interview API
  version: 0.0.1

paths:
#-----------------------------------------------------------------------
# <Accessing users>
  /user:
    get:
      security:
        - authcodeWithPKCE: [admin]
      tags:
        - users
      description: Retrieve multiple objects
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'  
        500:
          $ref: '#/components/responses/500APIError'
    post:
      tags:
        - users
      security:
        - authcodeWithPKCE: [admin]
      description: Create a new object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNoId'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400BadRequest'
        500:
          $ref: '#/components/responses/500APIError'
  /user/{userId}:
    get:
      security:
        - authcodeWithPKCE: [admin]
      
      tags:
        - users
      description: Retrieve a specific object
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: The object is returned in content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'
    patch:
      tags:
        - users
      security:
        - authcodeWithPKCE: [admin]
      description: Update the properties of the object with the provided ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNoId'
      responses:
        200:
          description: Object was updated successfully. The updated verion is returned in content.
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    delete:
      tags:
        - users
      security:
        - authcodeWithPKCE: [admin]
      description: Delete an object with the provided ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: Object deleted successfully. The deleted object is returned in content.
          content:
            application/json:
              schema:
                description: The deleted object
                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
  /user/management-interviewer:
    get:
      security:
        - authcodeWithPKCE: [admin]
        - authcodeWithPKCE: [project_manager]
      tags:
        - users
      description: Retrieve management interviewers
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'  
        500:
          $ref: '#/components/responses/500APIError'
  /user/technical-interviewer:
    get:
      security:
        - authcodeWithPKCE: [admin]
      tags:
        - users
      description: Retrieve technical interviewers
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'  
        500:
          $ref: '#/components/responses/500APIError'


#-----------------------------------------------------------------------
# <Accessing roles>
  /role:
    get:
      security:
        - authcodeWithPKCE: [admin]
      tags:
        - roles
      description: Retrieve multiple objects
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'  
        500:
          $ref: '#/components/responses/500APIError'
    post:
      tags:
        - roles
      security:
        - authcodeWithPKCE: [admin]
      description: Create a new object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleNoId'
            
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          $ref: '#/components/responses/400BadRequest'
        500:
          $ref: '#/components/responses/500APIError'      
  /role/{roleId}:
    get:
      security:
        - authcodeWithPKCE: [admin]
      
      tags:
        - roles
      description: Retrieve a specific object
      parameters:
        - $ref: '#/components/parameters/RoleId'
      responses:
        200:
          description: The object is returned in content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    patch:
      tags:
        - roles
      security:
        - authcodeWithPKCE: [admin]
      description: Update the properties of the object with the provided ID
      parameters:
        - $ref: '#/components/parameters/RoleId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleNoId'
      responses:
        200:
          description: Object was updated successfully. The updated verion is returned in content.
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/Role'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    delete:
      tags:
        - roles
      security:
        - authcodeWithPKCE: [admin]
      description: Delete an object with the provided ID
      parameters:
        - $ref: '#/components/parameters/RoleId'
      responses:
        200:
          description: Object deleted successfully. The deleted object is returned in content.
          content:
            application/json:
              schema:
                description: The deleted object
                $ref: '#/components/schemas/Role'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      

#-----------------------------------------------------------------------
# <Accessing projects>
  /project:
    get:
      security:
        - authcodeWithPKCE: [admin project_manager]
      tags:
        - projects
      description: Retrieve multiple objects
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'  
        500:
          $ref: '#/components/responses/500APIError'
    post:
      tags:
        - projects
      security:
        - authcodeWithPKCE: [admin]
      description: Create a new object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectNoId'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/400BadRequest'
        500:
          $ref: '#/components/responses/500APIError'      
  /project/{projectId}:
    get:
      security:
        - authcodeWithPKCE: [admin project_manager]
      tags:
        - projects
      description: Retrieve a specific object
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: The object is returned in content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    patch:
      tags:
        - projects
      security:
        - authcodeWithPKCE: [admin]
      description: Update the properties of the object with the provided ID
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectNoId'
      responses:
        200:
          description: Object was updated successfully. The updated verion is returned in content.
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/Project'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    delete:
      tags:
        - projects
      security:
        - authcodeWithPKCE: [admin]
      description: Delete an object with the provided ID
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        200:
          description: Object deleted successfully. The deleted object is returned in content.
          content:
            application/json:
              schema:
                description: The deleted object
                $ref: '#/components/schemas/Project'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      

#-----------------------------------------------------------------------
# <Accessing positions>
  /position:
    get:
      security:
        - authcodeWithPKCE: [recruiter]
      tags:
        - positions
      description: Retrieve multiple objects
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Position'  
        500:
          $ref: '#/components/responses/500APIError'
    post:
      tags:
        - positions
      security:
        - authcodeWithPKCE: [recruiter]
      description: Create a new object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionNoId'  
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
        400:
          $ref: '#/components/responses/400BadRequest'
        500:
          $ref: '#/components/responses/500APIError'      
  /position/{positionId}:
    get:
      security:
        - authcodeWithPKCE: [recruiter]
      tags:
        - positions
      description: Retrieve a specific object
      parameters:
        - $ref: '#/components/parameters/PositionId'
      responses:
        200:
          description: The object is returned in content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Position'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    patch:
      tags:
        - positions
      security:
        - authcodeWithPKCE: [recruiter]
      description: Update the properties of the object with the provided ID
      parameters:
        - $ref: '#/components/parameters/PositionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PositionNoId'
      responses:
        200:
          description: Object was updated successfully. The updated verion is returned in content.
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/Position'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    delete:
      tags:
        - positions
      security:
        - authcodeWithPKCE: [recruiter]
      description: Delete an object with the provided ID
      parameters:
        - $ref: '#/components/parameters/PositionId'
      responses:
        200:
          description: Object deleted successfully. The deleted object is returned in content.
          content:
            application/json:
              schema:
                description: The deleted object
                $ref: '#/components/schemas/Position'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      

#---------------------------------------------------------------------------------
# <Accessing candidates>
  /candidate:
    get:
      tags:
        - candidates
      description: Retrieve multiple objects
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'  
        500:
          $ref: '#/components/responses/500APIError'
    post:
      tags:
        - candidates
      security:
        - authcodeWithPKCE: [sourcer]
      description: Create a new object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateNoId'
            
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        400:
          $ref: '#/components/responses/400BadRequest'
        500:
          $ref: '#/components/responses/500APIError'      
  /candidate/{candidateId}:
    get:
      security:
        - authcodeWithPKCE: [recruiter project_manager sourcer]
      tags:
        - candidates
      description: Retrieve a specific object
      parameters:
        - $ref: '#/components/parameters/CandidateId'
      responses:
        200:
          description: The object is returned in content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    patch:
      tags:
        - candidates
      security:
        - authcodeWithPKCE: [sourcer]
      description: Update the properties of the object with the provided ID
      parameters:
        - $ref: '#/components/parameters/CandidateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidateNoId'
      responses:
        200:
          description: Object was updated successfully. The updated verion is returned in content.
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/Candidate'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    delete:
      tags:
        - candidates
      security:
        - authcodeWithPKCE: [sourcer]
      description: Delete an object with the provided ID
      parameters:
        - $ref: '#/components/parameters/CandidateId'
      responses:
        200:
          description: Object deleted successfully. The deleted object is returned in content.
          content:
            application/json:
              schema:
                description: The deleted object
                $ref: '#/components/schemas/Candidate'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
  /candidate/{candidateId}/approve:
    patch:
      tags:
        - candidates
      security:
        - authcodeWithPKCE: [project_manager]
      description: Approve a candidate for his or her position
      parameters:
        - $ref: '#/components/parameters/CandidateId'
      responses:
        200:
          description: Candidate was approved for his or her position
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/Candidate'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
  /candidate/{candidateId}/reject:
    patch:
      tags:
        - candidates
      security:
        - authcodeWithPKCE: [project_manager]
      description: Reject a candidate
      parameters:
        - $ref: '#/components/parameters/CandidateId'
      responses:
        200:
          description: Candidate was rejected
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/Candidate'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
  /candidate/{candidateId}/management-interviewer/{managementInterviewerId}:
    patch:
      security:
        - authcodeWithPKCE: [project_manager]
      tags:
        - candidates
      description: Assign management interviewer to the given candidate
      parameters:
        - $ref: '#/components/parameters/CandidateId'
        - $ref: '#/components/parameters/ManagementInterviewerId'
      responses:
        200:
          description: The assignment was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
  /candidate/{candidateId}/technical-interviewer/{technicalInterviewerId}:
    patch:
      security:
        - authcodeWithPKCE: [project_manager]
      tags:
        - candidates
      description: Assign technical interviewer to the given candidate
      parameters:
        - $ref: '#/components/parameters/CandidateId'
        - $ref: '#/components/parameters/TechnicalInterviewerId'
      responses:
        200:
          description: The assignment was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
  /candidate/position/{positionId}:
    get:
      security:
        - authcodeWithPKCE: [recruiter]
      tags:
        - candidates
      description: Retrieve candidates applying for a specific position
      parameters:
        - $ref: '#/components/parameters/PositionId'
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      

#---------------------------------------------------------------------------------
# <Accessing technical interview>
  /technical-documentation:
    get:
      security:
        - authcodeWithPKCE: [admin]
      tags:
        - technical interview
      description: Retrieve multiple objects
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TechnicalDocumentation'  
        500:
          $ref: '#/components/responses/500APIError'
    post:
      tags:
        - technical interview
      security:
        - authcodeWithPKCE: [technical_interviewer]
      description: Create a new object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TechnicalDocumentationNoId'
            
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TechnicalDocumentation'
        400:
          $ref: '#/components/responses/400BadRequest'
        500:
          $ref: '#/components/responses/500APIError'      
  /technical-documentation/{technicalId}:
    get:
      security:
        - authcodeWithPKCE: [recruiter project_manager technical_interviewer]
      tags:
        - technical interview
      description: Retrieve a specific object
      parameters:
        - $ref: '#/components/parameters/TechnicalId'
      responses:
        200:
          description: The object is returned in content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TechnicalDocumentation'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    patch:
      tags:
        - technical interview
      security:
        - authcodeWithPKCE: [technical_interviewer]
      description: Update the properties of the object with the provided ID
      parameters:
        - $ref: '#/components/parameters/TechnicalId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TechnicalDocumentationNoId'
      responses:
        200:
          description: Object was updated successfully. The updated verion is returned in content.
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/TechnicalDocumentation'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    delete:
      tags:
        - technical interview
      security:
        - authcodeWithPKCE: [technical_interviewer]
      description: Delete an object with the provided ID
      parameters:
        - $ref: '#/components/parameters/TechnicalId'
      responses:
        200:
          description: Object deleted successfully. The deleted object is returned in content.
          content:
            application/json:
              schema:
                description: The deleted object
                $ref: '#/components/schemas/TechnicalDocumentation'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'


#---------------------------------------------------------------------------------
# <Accessing management interview>
  /management-documentation:
    get:
      security:
        - authcodeWithPKCE: [admin]
      tags:
        - management interview
      description: Retrieve multiple objects
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManagementDocumentation'  
        500:
          $ref: '#/components/responses/500APIError'
    post:
      tags:
        - management interview
      security:
        - authcodeWithPKCE: [management_interviewer]
      description: Create a new object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementDocumentationNoId'
            
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementDocumentation'
        400:
          $ref: '#/components/responses/400BadRequest'
        500:
          $ref: '#/components/responses/500APIError'      
  /management-documentation/{managementId}:
    get:
      security:
        - authcodeWithPKCE: [recruiter project_manager management_interviewer]
      tags:
        - management interview
      description: Retrieve a specific object
      parameters:
        - $ref: '#/components/parameters/ManagementId'
      responses:
        200:
          description: The object is returned in content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagementDocumentation'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    patch:
      tags:
        - management interview
      security:
        - authcodeWithPKCE: [management_interviewer]
      description: Update the properties of the object with the provided ID
      parameters:
        - $ref: '#/components/parameters/ManagementId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementDocumentationNoId'
      responses:
        200:
          description: Object was updated successfully. The updated verion is returned in content.
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/ManagementDocumentation'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    delete:
      tags:
        - management interview
      security:
        - authcodeWithPKCE: [management_interviewer]
      description: Delete an object with the provided ID
      parameters:
        - $ref: '#/components/parameters/ManagementId'
      responses:
        200:
          description: Object deleted successfully. The deleted object is returned in content.
          content:
            application/json:
              schema:
                description: The deleted object
                $ref: '#/components/schemas/ManagementDocumentation'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'

#---------------------------------------------------------------------------------
# <Accessing schedule>
  /schedule:
    get:
      security:
        - authcodeWithPKCE: [sourcer]
      tags:
        - schedule
      description: Retrieve multiple objects
      responses:
        200:
          description: The array of objects is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledInterview'  
        500:
          $ref: '#/components/responses/500APIError'
    post:
      tags:
        - schedule
      security:
        - authcodeWithPKCE: [sourcer]
      description: Create a new object
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduledInterview'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduledInterview'
        400:
          $ref: '#/components/responses/400BadRequest'
        500:
          $ref: '#/components/responses/500APIError'
  /schedule/{scheduledInterviewId}:
    get:
      security:
        - authcodeWithPKCE: [technical_interviewer sourcer]
      tags:
        - schedule
      description: Retrieve a specific object
      parameters:
        - $ref: '#/components/parameters/InterviewId'
      responses:
        200:
          description: The object is returned in content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduledInterview'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'
    patch:
      tags:
        - schedule
      security:
        - authcodeWithPKCE: [technical_interviewer sourcer]
      description: Update the properties of the object with the provided ID
      parameters:
        - $ref: '#/components/parameters/InterviewId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduledInterview'
      responses:
        200:
          description: Object was updated successfully. The updated verion is returned in content.
          content:
            application/json:
              schema:
                description: The newly updated object
                $ref: '#/components/schemas/ScheduledInterview'
        400:
          $ref: '#/components/responses/400BadRequest'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'      
    delete:
      tags:
        - schedule
      security:
        - authcodeWithPKCE: [technical_interviewer sourcer]
      description: Delete an object with the provided ID
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: Object deleted successfully. The deleted object is returned in content.
          content:
            application/json:
              schema:
                description: The deleted object
                $ref: '#/components/schemas/ScheduledInterview'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'
  /schedule/interviewer/{interviewerId}:
    get:
      security:
        - authcodeWithPKCE: [technical_interviewer management_interviewer]
      tags:
        - schedule
      description: Retrieve an array of scheduled interviews with a specific interviewer
      parameters:
        - $ref: '#/components/parameters/InterviewerId'
      responses:
        200:
          description: The array is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledInterview'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'
  /schedule/candidate/{candidateId}:
    get:
      security:
        - authcodeWithPKCE: [candidate sourcer]
      tags:
        - schedule
      description: Retrieve an array of scheduled interviews with a specific candidate
      parameters:
        - $ref: '#/components/parameters/CandidateId'
      responses:
        200:
          description: The array is returned in content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduledInterview'
        404:
          $ref: '#/components/responses/404ObjectNotFound'
        500:
          $ref: '#/components/responses/500APIError'






#=================================================================================
#COMPONENTS=======================================================================
components:
  parameters:
    UserId:
      in: path
      name: userId
      description: Unique ID of a user
      required: true
      schema:
        type: string
        example: gjeigeajnajfsjf4d5s6d6
    RoleId:
      in: path
      name: roleId
      description: Unique ID of a role
      required: true
      schema:
        type: string
        example: opnb79wbjwebwejqw5we5w
    ProjectId:
      in: path
      name: projectId
      description: Unique ID of a project
      required: true
      schema:
        type: string
        example: onaegbnaskafkasf9dv2as
    PositionId:
      in: path
      name: positionId
      description: Unique ID of a job position
      required: true
      schema:
        type: string
        example: bi9owemwef2eweoebffogk
    CandidateId:
      in: path
      name: candidateId
      description: Unique ID of a candidate for a particular position
      required: true
      schema:
        type: string
        example: kanaogbnb5gsdv3sdv
    TechnicalId:
      in: path
      name: technicalId
      description: Unique ID of a technical interview
      required: true
      schema:
        type: string
        example: kkoavldmvaskaspv24jkj
    ManagementId:
      in: path
      name: managementId
      description: Unique ID of a management interview
      required: true
      schema:
        type: string
        example: kakakvajaqoror3p42hi
    InterviewId:
      in: path
      name: scheduled interview ID
      description: Unique ID of a scheduled technical or management interview
      required: true
      schema:
        type: string
        example: kkoavldmvaskaspv24jkj
    TechnicalInterviewerId:
      in: path
      name: technical interviewer ID
      description: Unique ID of a user with technical interviewer role
      required: true
      schema:
        type: string
        example: gjeigeajnajfsjf4d5s6d6
    ManagementInterviewerId:
      in: path
      name: management interviewer ID
      description: Unique ID of a user with management interviewer role
      required: true
      schema:
        type: string
        example: gjeigeajnajfsjf4d5s6d6
    InterviewerId:
      in: path
      name: technical interviewer ID
      description: Unique ID of a user with technical interviewer or management interviewer role
      required: true
      schema:
        type: string
        example: gjeigeajnajfsjf4d5s6d6

#--------------------------------------------------
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: sdf2sd5sfsd6f5dfd5
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        middleName:
          type: string
          example: D.
        employeeId:
          type: integer
          example: 1234567
        profilePictureURL:
          type: string
          example: https://profile-pics/xyz/1234567
        dateOfBirth:
          type: string
          example: 1999-08-15
        roleId:
          type: string
          example: opnb79wbjwebwejqw5we5w
    UserNoId:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        middleName:
          type: string
          example: D.
        employeeId:
          type: integer
          example: 1234567
        profilePictureURL:
          type: string
          example: https://profile-pics/xyz/1234567
        dateOfBirth:
          type: string
          example: 1999-08-15
        roleId:
          type: string
          example: opnb79wbjwebwejqw5we5w
    Role:
      type: object
      properties:
        id:
          type: string
          example: opnb79wbjwebwejqw5we5w
        name:
          type: string
          example: administrator
    RoleNoId:
      type: object
      properties:
        name:
          type: string
          example: administrator
    Project:
      type: object
      properties:
        id:
          type: string
          example: opnb79wbjwebwejqw5we5w
        name:
          type: string
          example: Interview system
        projectManagerId:
          type: string
          example: sdf2sd5sfsd6f5dfd5
    ProjectNoId:
      type: object
      properties:
        name:
          type: string
          example: Interview system
        projectManagerId:
          type: string
          example: sdf2sd5sfsd6f5dfd5
    Position:
      type: object
      properties:
        id:
          type: string
          example: opnb79wbjwebwejqw5we5w
        name:
          type: string
          example: data engineer
        recruiterId:
          type: string
          example: sdf2sd5sfsd6f5dfd5
    PositionNoId:
      type: object
      properties:
        name:
          type: string
          example: data engineer
        recruiterId:
          type: string
          example: sdf2sd5sfsd6f5dfd5
    Candidate:
      type: object
      properties:
        id:
          type: string
          example: kanaogbnb5gsdv3sdv
        userId:
          type: string
          example: gjeigeajnajfsjf4d5s6d6
        positionId:
          type: string
          example: opnb79wbjwebwejqw5we5w
        technicalInterviewerId:
          type: string
          example: akds7igseajsnajfsjf410
        managementInterviewerId:
          type: string
          example: gjdseigseajsnajfsjf4d9
        technicalDocumentationId:
          type: string
          example: kkoavldmvaskaspv24jkj
        managementDocumentationId:
          type: string
          example: kakakvajaqoror3p42hi
    CandidateNoId:
      type: object
      properties:
        userId:
          type: string
          example: gjeigeajnajfsjf4d5s6d6
        positionId:
          type: string
          example: opnb79wbjwebwejqw5we5w
        technicalInterviewerId:
          type: string
          example: akds7igseajsnajfsjf410
        managementInterviewerId:
          type: string
          example: gjdseigseajsnajfsjf4d9
        technicalDocumentationId:
          type: string
          example: kkoavldmvaskaspv24jkj
        managementDocumentationId:
          type: string
          example: kakakvajaqoror3p42hi
    TechnicalDocumentation:
      type: object
      properties:
        id:
          type: string
          example: kkoavldmvaskaspv24jkj
        candidateId:
          type: string
          example: kanaogbnb5gsdv3sdv
        interviewerId:
          type: string
          example: sdf2sd5sfsd6f5dfd5
        score:
          type: integer
          example: 80
    TechnicalDocumentationNoId:
      type: object
      properties:
        candidateId:
          type: string
          example: kanaogbnb5gsdv3sdv
        positionId:
          type: string
          example: opnb79wbjwebwejqw5we5w
        interviewerId:
          type: string
          example: sdf2sd5sfsd6f5dfd5
        score:
          type: integer
          example: 80
    ManagementDocumentation:
      type: object
      properties:
        id:
          type: string
          example: kakakvajaqoror3p42hi
        candidateId:
          type: string
          example: kanaogbnb5gsdv3sdv
        interviewerId:
          type: string
          example: sdf2sd5sfsd6f5dfd5
        score:
          type: integer
          example: 80
    ManagementDocumentationNoId:
      type: object
      properties:
        candidateId:
          type: string
          example: kanaogbnb5gsdv3sdv
        interviewerId:
          type: string
          example: sdf2sd5sfsd6f5dfd5
        score:
          type: integer
          example: 80
    ScheduledInterview:
      type: object
      properties:
        interviewType:
          type: string
          example: technical
        candidateId:
          type: string
          example: kkoavldmvaskaspv24jkj
        interviewerId:
          type: string
          example: skko4fd5fdf5s6s6d5d5d
        date:
          type: string
          example: 2022-08-20
        startTime:
          type: string
          example: 10:30
        finishTime:
          type: string
          example: 11:00


#--------------------------------------------------------------
  responses:
    400BadRequest:
      description: Bad request. Check the content!
    404ObjectNotFound:
      description: The object with the provided ID was not found
    500APIError:
      description: Unexpected server-side error


#--------------------------------------------------------------
  securitySchemes:
    authcodeWithPKCE:
      description: Authorization code flow with Proof Key for Code Exchange
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://oktaxxxxxx.com/authorize
          tokenUrl: http://oktaxxxxxx.com/token
          scopes:
            admin: Administrator scope
            recruiter: Recruiter scope
            sourcer: Sourcer scope
            project_manager: Project manager scope
            technical_interviewer: Technical interviewer scope
            management_interviewer: Management interviewer scope
            candidate: Candidate scope





